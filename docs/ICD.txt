Interface Control Document: Procedural 2D Map Generation System
Version: 1.0
Date: October 26, 2023
Author: System AI
1.0 Purpose
This document defines the software interfaces for a modular procedural 2D map generation system. It specifies the inputs, outputs, and functional contracts for individual noise generation components and the primary MapGenerator class that integrates them. The goal is to establish a clear and stable architecture for combining various noise algorithms into a cohesive final product.
2.0 Scope
This ICD covers the external interfaces of all noise generation modules and the internal routing logic of the main MapGenerator class. The specific mathematical implementation of each noise algorithm (e.g., the gradient calculations in Perlin noise) is considered a "black box" and is outside the scope of this document.
3.0 System Overview
The system is composed of two primary types of components:
Noise Providers: A collection of classes, each implementing a specific noise generation or modification technique. They conform to a standardized interface, receiving coordinates and parameters, and returning a single float value.
Map Generator: A high-level orchestrator class that takes a configuration, instantiates the required NoiseProviders, and executes a defined pipeline of operations to generate a final 2D Heightmap.
4.0 Core Data Structures
4.1 Heightmap
A 2D array of floating-point numbers representing the final map data.
Type: float[][] or equivalent 2D matrix structure.
Dimensions: width (integer), height (integer).
Value Range: Values are typically normalized to the range [0.0, 1.0], where 0.0 might represent the lowest point (e.g., deep water) and 1.0 the highest (e.g., mountain peak).
4.2 Vector2D
A simple structure to represent a point in 2D space.
Properties: x (float), y (float).
4.3 NoiseParameters
A base structure or class for common noise function parameters. Specific noise providers will use extended versions of this structure.
Base Properties:
seed (integer): For deterministic random generation.
frequency (float): Controls the "zoom" level of the noise. Higher frequency means more features in a given area.
amplitude (float): A multiplier for the output value. Defaults to 1.0.
5.0 Component Interfaces (Noise Providers)
All NoiseProvider components are treated as black boxes that implement a generate method.
5.1 Base Noise Providers
These generate fundamental noise patterns.
Interface: BaseNoiseProvider.generate(coordinates: Vector2D, params: NoiseParameters) -> float
Input:
coordinates: The Vector2D point in the noise space to sample.
params: A NoiseParameters object containing at least seed and frequency.
Output:
A single float value, typically in the range [-1.0, 1.0].
Modules:
Value Noise (ValueNoiseProvider):
Description: Grid of random values with smooth interpolation.
Perlin Noise (PerlinNoiseProvider):
Description: Gradient-based noise producing smooth, natural-looking hills.
Simplex Noise (SimplexNoiseProvider):
Description: Improved gradient noise with fewer artifacts.
OpenSimplex Noise (OpenSimplexNoiseProvider):
Description: Open-source, patent-free variant of Simplex.
Worley Noise (WorleyNoiseProvider):
Description: "Cellular" patterns generated by distance to cell points.
Note: params may be extended to include cell density or distance metric.
5.2 Fractal Noise Providers
These combine octaves of a base noise provider to add detail.
Interface: FractalNoiseProvider.generate(coordinates: Vector2D, params: FbmParameters, sourceProvider: BaseNoiseProvider) -> float
Input:
coordinates: The Vector2D point to sample.
params: An FbmParameters object extending NoiseParameters with:
octaves (integer): Number of noise layers to sum.
lacunarity (float): Frequency multiplier for each successive octave.
persistence (float): Amplitude multiplier for each successive octave.
sourceProvider: An instance of a BaseNoiseProvider (e.g., PerlinNoiseProvider) to be used as the building block.
Output:
A single float value, typically in the range [-1.0, 1.0].
Modules:
6. Fractional Brownian Motion (FbmProvider):
* Description: Sum of octaves of a base noise for multi-scale detail.
7. Billow Noise (BillowNoiseProvider):
* Description: fBm variant using absolute-value peaks for a "billowy" cloud-like appearance.
8. Ridged Multifractal (RidgedMultifractalProvider):
* Description: Inverts and squares noise values to emphasize sharp ridges.
9. Hybrid Multifractal (HybridMultifractalProvider):
* Description: Mixes standard and ridged fBm for varied roughness.
5.3 Modifier/Combiner Providers
These take the output of one or more other providers to create complex effects.
10. Domain Warping (DomainWarpingProvider)
Description: Uses one noise to distort the input coordinates of another.
Interface: DomainWarpingProvider.generate(coordinates: Vector2D, params: NoiseParameters, baseProvider: INoiseProvider, warpProvider: INoiseProvider) -> float
Input:
coordinates: The initial Vector2D point.
params: Standard NoiseParameters. The amplitude property here controls the strength of the warp effect.
baseProvider: The noise provider whose output is desired (e.g., an FbmProvider).
warpProvider: The noise provider used to distort the coordinates (e.g., a PerlinNoiseProvider).
Output: The float value from baseProvider.
11. Noise Modulation (NoiseModulationProvider)
Description: Blends or multiplies different noise types.
Interface: NoiseModulationProvider.generate(coordinates: Vector2D, params: ModulationParameters, providerA: INoiseProvider, providerB: INoiseProvider) -> float
Input:
coordinates: The Vector2D point to sample.
params: ModulationParameters extending NoiseParameters with:
operation (enum): e.g., ADD, MULTIPLY, AVERAGE, SCREEN.
providerA, providerB: The two noise providers to be combined.
Output: The float result of the combination.
12. Hybrid Masks (HybridMaskProvider)
Description: Uses one low-frequency noise as a mask to blend two other noises.
Interface: HybridMaskProvider.generate(coordinates: Vector2D, params: MaskParameters, maskProvider: INoiseProvider, providerA: INoiseProvider, providerB: INoiseProvider) -> float
Input:
coordinates: The Vector2D point to sample.
params: MaskParameters extending NoiseParameters with:
blendThreshold (float): The value from the mask at which blending begins.
blendSharpness (float): How quickly the transition occurs.
maskProvider: The noise provider generating the mask (e.g., a low-frequency FbmProvider).
providerA, providerB: The two noise providers to be blended (e.g., providerA for land detail, providerB for ocean floor).
Output: A float value representing the smoothly blended result of providerA and providerB based on the maskProvider's output.
6.0 Main Routing Class: MapGenerator
The MapGenerator class is the central hub responsible for producing the final Heightmap. It does not generate noise itself but instead uses a configuration-driven pipeline to call the various NoiseProvider modules in a specific sequence.
6.1 MapGenerator I/O Interface
Input:
config (object/struct): A structured configuration object detailing the entire generation pipeline. This is typically a list of steps, where each step defines:
The NoiseProvider to use.
The specific parameters (NoiseParameters or a derivative) for that provider.
Input sources (e.g., which provider to use as a sourceProvider or maskProvider).
How to combine the result with the previous step's output (e.g., ADD, MULTIPLY, OVERWRITE).
width (integer): The width of the Heightmap to be generated.
height (integer): The height of the Heightmap to be generated.
globalSeed (integer): A master seed used to derive seeds for each step, ensuring the entire map is deterministic.
Output:
A final, normalized Heightmap object.
6.2 Internal Routing Logic & Enumerated Techniques
The MapGenerator's generateMap method executes the following logical flow:
Initialization:
Parses the config object.
Instantiates all required NoiseProvider modules as defined in the configuration steps.
Map Allocation:
Creates a primary Heightmap buffer of size width x height, initialized to 0.0.
Pixel Iteration:
Begins a nested loop over every pixel coordinate (ix, iy) from (0, 0) to (width-1, height-1).
Coordinate Transformation (per-pixel):
Converts the integer pixel coordinate (ix, iy) to a floating-point world-space Vector2D coordinate (wx, wy). This allows for global scaling/zooming of the entire map.
wx = ix / scale; wy = iy / scale;
Pipeline Execution (per-pixel):
For the current Vector2D coordinate, it processes the pipeline steps defined in the config.
A running currentValue variable is maintained for the pixel.
Example Pipeline:
Step 1: Base Landmass. Call a HybridMultifractalProvider (using OpenSimplex as its source) to generate a base continent shape. Store the result in currentValue.
Step 2: Masking. Call a HybridMaskProvider. Use a low-frequency FbmProvider as the maskProvider. Use a high-frequency RidgedMultifractalProvider as providerA (mountains) and a simple PerlinNoiseProvider as providerB (plains). The currentValue from Step 1 is used to weight the mask, ensuring mountains only appear on the landmass.
Step 3: Domain Warping. Call a DomainWarpingProvider. Use the result of Step 2 as the baseProvider and a new PerlinNoiseProvider as the warpProvider to add organic, swirling distortions to the terrain. Update currentValue with the result.
Step 4: Fine Detail Modulation. Call a NoiseModulationProvider. providerA is the currentValue from Step 3. providerB is a high-frequency WorleyNoiseProvider (for cracks/erosion). The operation is MULTIPLY.
Value Assignment:
After all pipeline steps for the pixel are complete, the final currentValue is written to the Heightmap buffer at (ix, iy).
Finalization (Post-Processing):
After iterating through all pixels, the entire Heightmap buffer may contain values outside the [0.0, 1.0] range.
A Normalization pass is performed. The generator finds the minimum (minVal) and maximum (maxVal) values in the entire map.
It then iterates through the map one last time, applying the formula map[x][y] = (map[x][y] - minVal) / (maxVal - minVal) to every pixel. This scales all values to the [0.0, 1.0] range.
Return:
The finalized, normalized Heightmap is returned.